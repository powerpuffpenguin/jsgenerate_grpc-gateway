package register

import (
	"net/http"
	"{{pkg}}/logger"
	"{{pkg}}/m/web/contrib/compression"

	"github.com/gin-gonic/gin"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/rakyll/statik/fs"
	"go.uber.org/zap"
)

var _compression = compression.Compression(compression.BrDefaultCompression,
	compression.GzDefaultCompression,
)

func HTTP(engine *gin.Engine, gateway *runtime.ServeMux, swagger bool) {
	engine.NoRoute(func(c *gin.Context) {
		c.Status(http.StatusOK)
		if c.Request.Method == `GET` || c.Request.Method == `HEAD` {
			c.Request.Header.Set(`Method`, c.Request.Method)
		}
		gateway.ServeHTTP(c.Writer, c.Request)
	})
	if swagger {
		document, e := fs.NewWithNamespace(`document`)
		if e != nil {
			logger.Logger.Panic(`statik document error`,
				zap.Error(e),
			)
		}
		r := engine.Group(`document`)
		r.Use(_compression)
		r.StaticFS(``, document)
	}
	// other gin route
}
